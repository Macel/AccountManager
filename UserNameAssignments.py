from AssignmentRules import AssignmentRule


class UserNameAssignment():

    MATCH_ANY_RULE = 0
    MATCH_ALL_RULES = 1

    def __init__(self, rules: AssignmentRule, matchType: int, formats: tuple,
                 userNameFields: str):
        """
        Creates a UserNameAssignment

        rules: a tuple of one or more AssignmentRules that define a regular
        expression that an attribute must match to qualify for this
        userNameAssignment.

        matchType: MATCH_ANY_RULE if any rule matched by this
        UserNameAssignment's rules list should indicate the username be
        be generated by this userNameAssignment.
        MATCH_ALL_RULES if all rules in this list must be matched to use this
        assignment.

        formats: a tuple of tuples, each tuple containing a list of formatting
        strings for how the username should be constructed (see settings.py)

        userNameFields: a tuple of strings containing the fields that will be
        used to construct the username.

        Each tuple in formats should have the same number of formatting strings
        as the number of fields provided in userNameFields.
        """

        # pack into a 1-element tuple if only one value was provided.
        if type(rules) is not tuple:
            rules = (rules,)
        if type(formats) is not tuple:
            formats = (formats,)
        if type(userNameFields) is not tuple:
            userNameFields = (userNameFields,)
        self._rules = rules
        self._formats = formats
        self._userNameFields = userNameFields
        self._matchType = matchType

    @property
    def matchMethod(self) -> int:
        """
        Returns MATCH_ANY_RULE if the user qualifies for this naming format
        if they match any one or more rule in the rules list.  Returns
        MATCH_ALL_RULES if the user must match all of the rules in order to
        qualify for this naming.
        """
        return self._matchMethod

    @property
    def rules(self) -> AssignmentRule:
        """
        Returns the list of AssignmentRule objects that describe the
        requirements for this username assignment.
        """
        return self._rules

    def match(self, row: dict) -> bool:
        """
        Returns true if the provided user is a match for this
        assignment's rules.
        """
        if self._matchMethod == self.MATCH_ANY_RULE:
            if self._ruleMatchCount(row) > 0:
                return True
            else:
                return False
        else:
            if self._ruleMatchCount(row) == len(self._rules):
                return True
            else:
                return False

    def _ruleMatchCount(self, row: dict) -> int:
        """
        Takes a row of data (as a dictionary of the form <fieldname: data>)
        and checks to see if the data in the provided fields matches the regex
        rules in this UserNameAssignment's AssignmentRules.

        Returns the number of rules that matched.
        """

        matchCount = 0
        for rule in self._rules:
            if rule.match(row[rule.sourceColumnName]):
                matchCount += 1
        return matchCount
